import simpy
import random 

def producer(env, buffer, buffer_size, buffer_not_full):
    while True:
        # Wait until the buffer is not full
        yield buffer_not_full
        yield env.timeout(3)  # Produce every 3 time units
        buffer.append("foo")
        print(f"Produced foo at {env.now}")
        print(f"Buffer size: {len(buffer)}")

        # Check if the buffer is full or not to trigger the event
        if len(buffer) < buffer_size:
            buffer_not_full = env.event()  # Create a new event for buffer not full
            buffer_not_full.succeed()  # Trigger the event

def consumer(env, buffer, buffer_not_empty):
    while True:
        # Wait until the buffer is not empty
        yield buffer_not_empty
        yield env.timeout(random.randint(1, 5))  # Consume every 1-5 time units
        buffer.pop()
        print(f"Consumed foo at {env.now}")
        print(f"Buffer size: {len(buffer)}")

        # Check if the buffer is empty or not to trigger the event
        if len(buffer) == 0:
            buffer_not_empty = env.event()  # Create a new event for buffer not empty
            buffer_not_empty.succeed()  # Trigger the event

# Create environment
env = simpy.Environment()

# Buffer and its size
buffer = []
buffer_size = 10

# Create events
buffer_not_full = env.event()  # Event for buffer not full
buffer_not_empty = env.event()  # Event for buffer not empty

# Initially, the buffer is empty, so we trigger buffer_not_full event
buffer_not_full.succeed()

# Add processes
env.process(producer(env, buffer, buffer_size, buffer_not_full))
env.process(consumer(env, buffer, buffer_not_empty))

# Run the simulation
env.run(until=51)
